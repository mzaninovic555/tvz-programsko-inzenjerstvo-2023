<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hr.tvz.pios.modul.build.BuildRepository">
  <resultMap id="buildResultMap" type="hr.tvz.pios.modul.build.Build">
    <id     property="id"               column="id" />
    <result property="title"            column="title" />
    <result property="description"      column="description" />
    <result property="link"             column="link" />
    <result property="isPublic"         column="is_public" />
    <result property="finalized"        column="finalized" />
    <association property="user" javaType="hr.tvz.pios.modul.user.User"
                 resultMap="hr.tvz.pios.modul.user.UserRepository.userResultMap"
                 columnPrefix="u_" />
    <collection property="components" columnPrefix="c_"
                resultMap="hr.tvz.pios.modul.component.ComponentRepository.componentResultMap"
                ofType="hr.tvz.pios.modul.component.Component" />
  </resultMap>

  <!-- SQL -->
  <sql id="buildResultMapColumns">
    ${alias}id                 ${columnPrefix}id,
    ${alias}title              ${columnPrefix}title,
    ${alias}description        ${columnPrefix}description,
    ${alias}link               ${columnPrefix}link,
    ${alias}is_public          ${columnPrefix}is_public,
    ${alias}finalized          ${columnPrefix}finalized,
    ${alias}user_id            ${columnPrefix}user_id
  </sql>

  <!-- SELECT -->
  <select id="getById" resultMap="buildResultMap">
    select
    <include refid="buildResultMapColumns">
      <property name="alias" value="b."/>
      <property name="columnPrefix" value=""/>
    </include>,
    <include refid="hr.tvz.pios.modul.user.UserRepository.userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value="u_"/>
    </include>,
    <include refid="hr.tvz.pios.modul.component.ComponentRepository.componentResultMapColumns">
      <property name="alias" value="c."/>
      <property name="columnPrefix" value="c_"/>
    </include>
    from BUILDS b
      join users u on u.id = b.user_id
      join builds_components bc on b.id = bc.build_id
      join components c on bc.component_id = c.id
    where b.id = #{id}
  </select>

  <select id="getByLink" resultMap="buildResultMap">
    select
    <include refid="buildResultMapColumns">
      <property name="alias" value="b."/>
      <property name="columnPrefix" value=""/>
    </include>,
    <include refid="hr.tvz.pios.modul.user.UserRepository.userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value="u_"/>
    </include>,
    <include refid="hr.tvz.pios.modul.component.ComponentRepository.componentResultMapColumns">
      <property name="alias" value="c."/>
      <property name="columnPrefix" value="c_"/>
    </include>
    from BUILDS b
         left join users u on u.id = b.user_id
         left join builds_components bc on b.id = bc.build_id
         left join components c on bc.component_id = c.id
    where b.link = #{link}
  </select>

  <select id="buildHasComponent" resultType="boolean" parameterType="Long">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
      FROM builds_components
     WHERE component_id = #{componentId}
       AND build_id = #{buildId}
  </select>

  <select id="getByUserId" resultMap="buildResultMap">
    select
    <include refid="buildResultMapColumns">
      <property name="alias" value="b."/>
      <property name="columnPrefix" value=""/>
    </include>,
    <include refid="hr.tvz.pios.modul.user.UserRepository.userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value="u_"/>
    </include>,
    <include refid="hr.tvz.pios.modul.component.ComponentRepository.componentResultMapColumns">
      <property name="alias" value="c."/>
      <property name="columnPrefix" value="c_"/>
    </include>
    from BUILDS b
         left join users u on u.id = b.user_id
         left join builds_components bc on b.id = bc.build_id
         left join components c on bc.component_id = c.id
    where user_id = #{userId}
  </select>

  <insert id="insert" parameterType="hr.tvz.pios.modul.build.Build">
    insert into BUILDS (
      title,
      description,
      link,
      is_public,
      finalized,
      user_id
    ) values (
      #{title},
      #{description},
      #{link},
      #{isPublic},
      #{finalized},
      #{user.id}
    )
  </insert>

  <insert id="insertBuildComponent">
    insert into builds_components (
      component_id,
      build_id
    ) values (
      #{buildId},
      #{componentId}
    )
  </insert>

  <update id="updateById" parameterType="hr.tvz.pios.modul.build.Build">
    update BUILDS
    set id = #{id},
        title = #{title},
        description = #{description},
        link = #{link},
        is_public = #{isPublic},
        finalized = #{finalized},
        user_id = #{user.id}
    where id = #{id}
  </update>

  <delete id="deleteById">
    delete from builds_components
    where build_id = #{id};
    delete from BUILDS
    where id = #{id}
  </delete>

  <insert id="addComponent" parameterType="Long">
    INSERT INTO builds_components (component_id, build_id)
    VALUES (#{componentId}, #{buildId})
  </insert>

  <delete id="removeComponent" parameterType="Long">
    DELETE FROM builds_components
     WHERE component_id = #{componentId}
       AND build_id = #{buildId}
  </delete>
</mapper>
