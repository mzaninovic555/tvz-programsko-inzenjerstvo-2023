<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="hr.tvz.pios.modul.user.UserRepository">
  <resultMap id="userResultMap" type="hr.tvz.pios.modul.user.User">
    <id     property="id"             column="id" />
    <result property="username"       column="username" />
    <result property="password"       column="password" />
    <result property="email"          column="email" />
    <result property="description"    column="description" />
    <result property="creationDate"   column="creation_date" />
    <result property="isActivated"    column="is_activated" />
    <result property="accountType"    column="account_type" />
    <result property="isActive"       column="is_active" />
    <association property="role"      javaType="hr.tvz.pios.modul.role.Role"
                 resultMap="hr.tvz.pios.modul.role.RoleRepository.roleResultMap"
                 columnPrefix="r_"/>
  </resultMap>

  <!-- SQL -->
  <sql id="userResultMapColumns">
    ${alias}id               ${columnPrefix}id,
    ${alias}username         ${columnPrefix}username,
    ${alias}password         ${columnPrefix}password,
    ${alias}email            ${columnPrefix}email,
    ${alias}description      ${columnPrefix}description,
    ${alias}creation_date    ${columnPrefix}creation_date,
    ${alias}is_activated     ${columnPrefix}is_activated,
    ${alias}account_type     ${columnPrefix}account_type,
    ${alias}is_active        ${columnPrefix}is_active
  </sql>

  <!-- SELECT -->
  <select id="isUsernameTaken" resultType="Boolean">
    select
      case
        when count(*) > 0 then 1
        else 0
      end
    from users u
    where u.username = #{username}
  </select>

  <select id="isEmailTaken" resultType="Boolean">
    select
      case
        when count(*) > 0 then 1
        else 0
        end
    from users u
    where u.email = #{email}
  </select>

  <select id="getById" resultMap="userResultMap">
    select
    <include refid="userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value=""/>
    </include>
    <include refid="hr.tvz.pios.modul.role.RoleRepository.roleResultMapColumns">
      <property name="alias" value="r."/>
      <property name="columnPrefix" value="r_"/>
    </include>
    from USERS u
      join roles r on r.id = u.role_id
    where u.id = #{id}
  </select>

  <select id="getByUsername" resultMap="userResultMap">
    select
    <include refid="userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value=""/>
    </include>,
    <include refid="hr.tvz.pios.modul.role.RoleRepository.roleResultMapColumns">
      <property name="alias" value="r."/>
      <property name="columnPrefix" value="r_"/>
    </include>
    from USERS u
      join roles r on r.id = u.role_id
    where u.username = #{username}
  </select>

  <select id="getByEmail" resultMap="userResultMap">
    select
    <include refid="userResultMapColumns">
      <property name="alias" value="u."/>
      <property name="columnPrefix" value=""/>
    </include>,
    <include refid="hr.tvz.pios.modul.role.RoleRepository.roleResultMapColumns">
      <property name="alias" value="r."/>
      <property name="columnPrefix" value="r_"/>
    </include>
    from USERS u
    join roles r on r.id = u.role_id
    where u.email = #{email}
  </select>

  <insert id="insert" parameterType="hr.tvz.pios.modul.user.User">
    insert into USERS (
      username,
      password,
      email,
      description,
      creation_date,
      is_activated,
      account_type,
      role_id
    ) values (
      #{username},
      #{password},
      #{email},
      #{description},
      #{creationDate},
      #{isActivated},
      #{accountType},
      #{role.id}
    )
  </insert>

  <update id="updateById" parameterType="hr.tvz.pios.modul.user.User">
    update USERS
    set username = #{username},
        password = #{password},
        email = #{email},
        description = #{description},
        creation_date = #{creationDate},
        is_activated = #{isActivated},
        account_type = #{accountType},
        role_id = #{role.id}
    where id = #{id}
  </update>

  <update id="updateIsActivatedById">
    update USERS
    set is_activated = #{isActivated}
    where id = #{id}
  </update>

  <update id="deactivateByUsername">
    update USERS
    set is_active = false
    where username = #{username}
  </update>

  <delete id="deleteById">
    delete from USERS
    where id = #{id}
  </delete>
</mapper>
